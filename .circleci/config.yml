version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  notify-on-fail:
    parameters:
      channel:
        type: string
        default: "general"
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

# Job definitions
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-on-fail:
          channel: build-failures
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-on-fail:
          channel: build-failures

  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: run FrontEnd tests
          command: |
            cd frontend
            npm install
            npm run test
      - notify-on-fail:
          channel: code-test-failures

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: run BackEnd tests
          command: |
            cd backend
            npm install
            npm run test
      - notify-on-fail:
          channel: code-test-failures

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: Audit Frontend code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - notify-on-fail:
          channel: vulnerability-audit-failures

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: Audit backend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - notify-on-fail:
          channel: vulnerability-audit-failures

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # cimg/aws:2022.06
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --tags Name="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --tags Name="frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch ~/inventory
            echo [all] > ~/inventory
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9f:65:8f:c7:ac:93:76:dc:cd:46:d9:f9:30:a1:5a:a0"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
  
  

# Workflow definitions
workflows:
  build_and_test:
    jobs:
      - build-frontend:
          context:
            - slack-vars
      - build-backend:
          context:
            - slack-vars
      - test-frontend:
          requires: [build-frontend]
          context:
            - slack-vars
      - test-backend:
          requires: [build-backend]
          context:
            - slack-vars
      - scan-frontend:
          requires: [build-frontend]
          context:
            - slack-vars
      - scan-backend:
          requires: [build-backend]
          context:
            - slack-vars
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
