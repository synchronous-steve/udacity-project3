version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  notify-on-fail:
    parameters:
      channel:
        type: string
        default: "general"
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      run_when:
        type: string
        default: on_fail
    steps:
      - run:
          name: Destroy backend on failure
          when: << parameters.run_when >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Empty S3 bucket
          when: << parameters.run_when >>
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - run:
          name: Destroy frontend on failure
          when: << parameters.run_when >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    parameters:
      run_when:
        type: string
        default: on_fail
    steps:
      - run:
          name: Revert migrations
          command: |
            # Fetch migration statud from KVDB
            SUCCESS=$(curl -k "https://kvdb.io/W731k82q3QKRA74QoPjp86/migration_${CIRCLE_WORKFLOW_ID:0:7}")

            # Logic for reverting the database state
            if (( $SUCCESS == 'success' ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            else
              echo 'no migration rollback required'
            fi
          when: << parameters.run_when >>

# Job definitions
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-on-fail:
          channel: build-failures
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-on-fail:
          channel: build-failures

  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run FrontEnd tests
          command: |
            cd frontend
            npm install
            npm run test
      - notify-on-fail:
          channel: code-test-failures

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run BackEnd tests
          command: |
            cd backend
            npm install
            npm run test
      - notify-on-fail:
          channel: code-test-failures

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit Frontend code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - notify-on-fail:
          channel: vulnerability-audit-failures

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit backend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - notify-on-fail:
          channel: vulnerability-audit-failures

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            echo "Deploy BackEnd Infrastructure"
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --tags Name="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            echo "Deploy Frontend Infrastructure"
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --tags Name="frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "Save backend IP to inventory for anisble"
            touch ~/inventory
            echo [all] > ~/inventory
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # Destroy infrastructure and revert migration on failure
      - destroy-environment:
          run_when: on_fail
      - revert-migrations:
          run_when: on_fail 


  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9f:65:8f:c7:ac:93:76:dc:cd:46:d9:f9:30:a1:5a:a0"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            echo "installing Ansible"
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      # Destroy infrastructure and revert migration on failure
      - destroy-environment:
          run_when: on_fail  
      - revert-migrations:
          run_when: on_fail 


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            ls
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              echo "Migration successful. Upload status to KVDB"
              curl -k "https://kvdb.io/W731k82q3QKRA74QoPjp86/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d 'success'
            else
              echo "Migration did not take place"
            fi

      # Destroy infrastructure and revert migration on failure
      - destroy-environment:
          run_when: on_fail    
      - revert-migrations:
          run_when: on_fail 
    

  deploy-frontend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/   
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
      - run:
          name: Install nodejs, npm, gzip and tar
          command: |
            apk add --update nodejs npm gzip tar curl
      - run:
          name: Get backend url and upload to kvdb
          command: |
            export BACKEND_IP=$(grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Backend URL is:  ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

            #### Send BACKEND URL to kvdb
            if [[ ! -z "${API_URL}" ]]
              then
                echo "uploading $API_URL to kvdb"
                curl -k "https://kvdb.io/W731k82q3QKRA74QoPjp86/backend_api_url_${CIRCLE_WORKFLOW_ID:0:7}" -d "${API_URL}"
              else
                echo "API_KEY check failed in if condition"
                exit 1
            fi
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Destroy infrastructure and revert migration on failure
      - destroy-environment:
          run_when: on_fail
      - revert-migrations:
          run_when: on_fail 


  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints:
            - "9f:65:8f:c7:ac:93:76:dc:cd:46:d9:f9:30:a1:5a:a0"
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install nodejs, npm, gzip, curl and tar
          command: |
            apk add --update nodejs npm gzip tar openssh curl
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..

            # Zip the directory
            tar -C backend -czvf ~/artifact.tar.gz .
            echo "list tar file in home"
            ls ~/
            cd .circleci/ansible

            # Fetch host IP add ssh key to knownhosts
            export TARGET_IP=$(grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' inventory.txt)
            ssh-keyscan ${TARGET_IP} >> ~/.ssh/known_hosts

            scp ~/artifact.tar.gz ubuntu@${TARGET_IP}:/tmp
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt

            # start ansible playbook to deploy back end services
            ansible-playbook -i inventory.txt deploy-backend.yml

            #add wait for server to be fully ready
            sleep 20

      # Destroy infrastructure and revert migration on failure
      - destroy-environment:
          run_when: on_fail
      - revert-migrations:
          run_when: on_fail 


  smoke-test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
      - run:
          name: Install curl
          command: |
            apk add --update curl
      - run:
          name: Backend smoke test
          command: |
              # Fetch and prepare the BACKEND_IP env var
              export BACKEND_URL=$(curl -k "https://kvdb.io/W731k82q3QKRA74QoPjp86/backend_api_url_${CIRCLE_WORKFLOW_ID:0:7}")

              echo ${CIRCLE_WORKFLOW_ID:0:7}
              echo "backend url is: ${BACKEND_URL}"

              if curl "${BACKEND_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
            
      # Destroy infrastructure and revert migration on failure
      - destroy-environment:
          run_when: on_fail
      - revert-migrations:
          run_when: on_fail


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Store old workflowID for future reference
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            echo "Old Workflow ID: ${OldWorkflowID}"

            # Upload old workflowID to KVDB
            curl -k "https://kvdb.io/W731k82q3QKRA74QoPjp86/oldworkflowID" -d "${OldWorkflowID}"

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      # Destroy infrastructure and revert migration on failure
      - destroy-environment:
          run_when: on_fail
      - revert-migrations:
          run_when: on_fail 


  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Cleanup previous deployment stacks
            command: |
              # Fetch OldWorkflowID from KVDB
              export OldWorkflowID=$(curl -k "https://kvdb.io/W731k82q3QKRA74QoPjp86/oldworkflowID")

              echo 'export OldWorkflowID1="${OldWorkflowID}"' >> "$BASH_ENV"

              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

              echo Stack names: "${STACKS[@]}"

              # Clear old deployments

              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack \
                  --stack-name "udapeople-backend-${OldWorkflowID}"

                aws cloudformation delete-stack \
                  --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi


# Workflow definitions
workflows:
  build_and_test:
    jobs:
      - build-frontend:
          context:
            - slack-vars
      - build-backend:
          context:
            - slack-vars
      - test-frontend:
          requires: [build-frontend]
          context:
            - slack-vars
      - test-backend:
          requires: [build-backend]
          context:
            - slack-vars
      - scan-frontend:
          requires: [build-frontend]
          context:
            - slack-vars
      - scan-backend:
          requires: [build-backend]
          context:
            - slack-vars
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]          
