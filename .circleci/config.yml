version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  notify-on-fail:
    parameters:
      channel:
        type: string
        default: "general"
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      run_when:
        type: string
        default: on_fail
    steps:
      - run:
          name: Destroy backend on failure
          when: << parameters.run_when >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Empty S3 bucket
          when: << parameters.run_when >>
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - run:
          name: Destroy frontend on failure
          when: << parameters.run_when >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      

# Job definitions
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-on-fail:
          channel: build-failures
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-on-fail:
          channel: build-failures

  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: run FrontEnd tests
          command: |
            cd frontend
            npm install
            npm run test
      - notify-on-fail:
          channel: code-test-failures

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: run BackEnd tests
          command: |
            cd backend
            npm install
            npm run test
      - notify-on-fail:
          channel: code-test-failures

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit Frontend code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - notify-on-fail:
          channel: vulnerability-audit-failures

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: Audit backend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - notify-on-fail:
          channel: vulnerability-audit-failures

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # cimg/aws:2022.06
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --tags Name="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --tags Name="frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch ~/inventory
            echo [all] > ~/inventory
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          run_when: on_fail    
      # to figure out miigration rollback step !?


  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9f:65:8f:c7:ac:93:76:dc:cd:46:d9:f9:30:a1:5a:a0"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          run_when: on_fail    
      # to figure out migration rollback step !?


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            ls
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/W731k82q3QKRA74QoPjp86/migration_${CIRCLE_WORKFLOW_ID:0:7} -d 'success'
            fi

      - destroy-environment:
          run_when: on_fail    
      # to figure out miigration rollback step !?
    

  deploy-frontend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/   
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
            # pip install awscli
      - run:
          name: Install nodejs, npm, gzip and tar
          command: |
            apk add --update nodejs npm gzip tar
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 

      - destroy-environment:
          run_when: on_fail    
      # to figure out miigration rollback step !?


  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints:
            - "9f:65:8f:c7:ac:93:76:dc:cd:46:d9:f9:30:a1:5a:a0"
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install nodejs, npm, gzip and tar
          command: |
            apk add --update nodejs npm gzip tar openssh
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf ~/artifact.tar.gz .
            echo "list tar file in home"
            ls ~/
            cd .circleci/ansible
            export TARGET_IP=$(grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' inventory.txt)
            ssh-keyscan ${TARGET_IP} >> ~/.ssh/known_hosts
            ssh ubuntu@${TARGET_IP} "mkdir ~/tmp"
            scp artifact.tar.gz ubuntu@${TARGET_IP}:~/tmp
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          run_when: on_fail    
      # to figure out miigration rollback step !?  

    
  

# Workflow definitions
workflows:
  build_and_test:
    jobs:
      - build-frontend:
          context:
            - slack-vars
      - build-backend:
          context:
            - slack-vars
      - test-frontend:
          requires: [build-frontend]
          context:
            - slack-vars
      - test-backend:
          requires: [build-backend]
          context:
            - slack-vars
      - scan-frontend:
          requires: [build-frontend]
          context:
            - slack-vars
      - scan-backend:
          requires: [build-backend]
          context:
            - slack-vars
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
